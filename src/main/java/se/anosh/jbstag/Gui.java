package se.anosh.jbstag;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import se.anosh.jbstag.dao.GbsFileReader;
import se.anosh.jbstag.dao.GbsFileWriter;
import se.anosh.jbstag.domain.GbsTag;

public class Gui extends javax.swing.JFrame {

	private GbsTag tag;
        private Path filePath;

	/**
	 * Creates new form GbsTagGUI
	 */
	public Gui() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleField = new javax.swing.JTextField();
        composerField = new javax.swing.JTextField();
        copyrightField = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        composerLabel = new javax.swing.JLabel();
        copyrightLabel = new javax.swing.JLabel();
        openFileButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        fileNameField = new javax.swing.JTextField();
        fileNameLabel = new javax.swing.JLabel();
        labelImage = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        aboutMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GBS Tagger 0.1");
        setResizable(false);

        titleField.setColumns(12);
        titleField.setToolTipText("Game title - UTF-8 allowed");
        titleField.setDoubleBuffered(true);
        titleField.setEnabled(false);
        titleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleFieldActionPerformed(evt);
            }
        });

        composerField.setColumns(12);
        composerField.setToolTipText("Composer - UTF-8 allowed");
        composerField.setEnabled(false);
        composerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composerFieldActionPerformed(evt);
            }
        });

        copyrightField.setColumns(12);
        copyrightField.setToolTipText("Copyright field - UTF-8 allowed");
        copyrightField.setEnabled(false);

        titleLabel.setDisplayedMnemonic('T');
        titleLabel.setLabelFor(titleField);
        titleLabel.setText("Title");
        titleLabel.setToolTipText("Game title");

        composerLabel.setText("Composer");
        composerLabel.setToolTipText("Composer(s) of the music");

        copyrightLabel.setText("Copyright");

        openFileButton.setMnemonic('O');
        openFileButton.setText("Open file");
        openFileButton.setToolTipText("Click here to select a file to read tags from");
        openFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        saveButton.setMnemonic('S');
        saveButton.setText("Save");
        saveButton.setToolTipText("Save tags to file");
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        fileNameField.setColumns(12);
        fileNameField.setToolTipText("Game Boy Sound file");
        fileNameField.setEnabled(false);

        fileNameLabel.setText("File name");
        fileNameLabel.setToolTipText("Shows file being edited");

        labelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gameboy-tahsin.png"))); // NOI18N
        labelImage.setToolTipText("GBS Tagger");

        menuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        aboutMenu.setText("About");
        aboutMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        aboutMenu.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Credits");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        aboutMenu.add(jMenuItem1);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel)
                            .addComponent(composerLabel)
                            .addComponent(copyrightLabel)
                            .addComponent(fileNameLabel))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(composerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copyrightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(labelImage)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openFileButton)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {composerField, copyrightField, fileNameField, openFileButton, titleField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(titleLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(composerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(composerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copyrightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copyrightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileNameLabel)))
                    .addComponent(labelImage))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(openFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void titleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleFieldActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_titleFieldActionPerformed

	private void composerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composerFieldActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_composerFieldActionPerformed

	private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed

		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory((new File(System.getProperty("user.home"))));
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Game Boy Sound files", "gbs");
		fileChooser.setAcceptAllFileFilterUsed(false);
		fileChooser.addChoosableFileFilter(filter);

		int result = fileChooser.showOpenDialog(null);

		if (result == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fileChooser.getSelectedFile();

			if (readFile(selectedFile.getAbsolutePath())) {
				filePath = selectedFile.toPath();
				updateFields();
			}
			toggleInputFields();
			toggleSaveButton();
		}
	}//GEN-LAST:event_openFileButtonActionPerformed

	private void toggleInputFields() {
		titleField.setEnabled(true);
		composerField.setEnabled(true);
		copyrightField.setEnabled(true);
	}
	
	private void toggleSaveButton() {
		saveButton.setEnabled(true);
	}
	

	private void updateFields() {
		titleField.setText(tag.getTitle());
		composerField.setText(tag.getAuthor());
		copyrightField.setText(tag.getCopyright());
		fileNameField.setText(filePath.getFileName().toString());
	}

	private void saveChangesToFile() {

		final int initialHash = tag.hashCode();
		updateTagsFromFields();
		if (tag.hashCode() != initialHash) {
			writeTags();
		}
	}
	
	private void updateTagsFromFields() {
		tag.setTitle(titleField.getText());
		tag.setAuthor(composerField.getText());
		tag.setCopyright(copyrightField.getText());
	}
	
	private void writeTags() {
            try (GbsFileWriter writer = new GbsFileWriter(filePath.toString(), tag)) {
                writer.writeTitle();
                writer.writeAuthor();
                writer.writeCopyright();
		} catch (IOException | IllegalArgumentException ex) {
			showErrorMessageBox("Unable to write to file: " + ex.getMessage());
		}
	}
	
	private void showErrorMessageBox(String message) {
		JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
	}


	private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
	}//GEN-LAST:event_aboutMenuActionPerformed

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		JOptionPane.showMessageDialog(this, "GBS Tagger made by Anosh <anosh@anosh.se> in 2019.\n\n" +
				"Licensed under GNU GPL version 3, see enclosed file COPYING for full licence.\n\n"
				+ "Image by Tahsin Tahil (Creative Commons Attribution 3.0 Unported)", "About GBS Tagger", JOptionPane.INFORMATION_MESSAGE);

	}//GEN-LAST:event_jMenuItem1ActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    	saveChangesToFile();
    }//GEN-LAST:event_saveButtonActionPerformed


	private boolean readFile(final String filename) {
		try {
			GbsFileReader reader = new GbsFileReader(filename);
			tag = reader.getTags();
			return true;
		} catch (IOException ex) {
			showErrorMessageBox("Unable to open file: " + ex.getMessage());
			return false;
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Gui().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JTextField composerField;
    private javax.swing.JLabel composerLabel;
    private javax.swing.JTextField copyrightField;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel labelImage;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openFileButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
